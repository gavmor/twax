import { stub } from 'sinon';
import { AlchemyLanguageV1 as Alchemy } from 'watson-developer-cloud';
import { taxonomies, taxonomy } from '../src/alchemy';

describe('alchemy', function () {
  beforeEach(function () {
    const taxonomyResponse = { 
      status: 'OK',
      usage: 'By accessing AlchemyAPI or using information generated by AlchemyAPI, you are agreeing to be bound by the AlchemyAPI Terms of Use: http://www.alchemyapi.com/company/terms.html',
      totalTransactions: '1',
      language: 'english',
      taxonomy: [
        { confident: 'no', label: '/sports/running and jogging', score: '0.351563' },
        { confident: 'no', label: '/art and entertainment/music/singing', score: '0.124246' },
        { confident: 'no', label: '/sports/walking', score: '0.108304' } 
       ] 
    };
    stub(Alchemy.prototype, 'taxonomy').yields(null, taxonomyResponse);
  });
  afterEach(() => Alchemy.prototype.taxonomy.restore());
  
  describe('taxonomy', function () {
    it('turns a string into an array of taxonomy labels', function () {
      // I guess this could use a mock.
      const analysis = taxonomy("literally anything, because the API is stubbed");
      
      return expect(analysis).to.eventually.deep.equal([
        '/sports/running and jogging',
        '/art and entertainment/music/singing',
        '/sports/walking'
      ]);
    })
  })
  describe('taxonomies', function () {
    it('works', function () {
      const corpuses = [
        { quavmo: "If God is dead, then what is left?" },
        { errantspark: "Listening to them makes me think of biking REALLY FAST and running lots of RED LIGHTS in the RAIN in SAN FRANCISCO." }
      ];
      
      const analysis = taxonomies(corpuses);
      
      return expect(analysis).to.eventually.deep.equal([
        [
          { "quavmo": 'sports' },
          { "quavmo": 'art and entertainment' },
          { "quavmo": 'sports' }
        ],
        [
          { "errantspark": "sports" },
          { "errantspark": "art and entertainment" },
          { "errantspark": "sports" }
        ]
    ]);
    })
  });
});